#version 450

struct Particle {
    vec2 pos;
    vec2 vel;
    float mss;
    vec3 col;
};

float softening = 0.0001;

layout (binding = 0) uniform ParameterUBO {
    float deltaTime;
} ubo;

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
   Particle particlesIn[ ];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
   Particle particlesOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() 
{
    uint i = gl_GlobalInvocationID.x;
    uint globalWorkGroupSize = gl_WorkGroupSize.x * gl_NumWorkGroups.x;
    float sumX = 0;
	float sumY = 0;
    for (int j = 0; j < globalWorkGroupSize; j++) {
        vec2 distanceXY = particlesIn[j].pos.xy - particlesIn[i].pos.xy;

		float x2_y2 = distanceXY.x * distanceXY.x + distanceXY.y * distanceXY.y;

		float dist = inversesqrt(x2_y2 * x2_y2 * x2_y2 + softening);
		float b = particlesIn[j].mss * dist;

		sumX += distanceXY.x * b;
		sumY += distanceXY.y * b;
    }
    particlesOut[i].vel.x += sumX * ubo.deltaTime;
	particlesOut[i].vel.y += sumY * ubo.deltaTime;
    particlesOut[i].pos += particlesOut[i].vel;
}